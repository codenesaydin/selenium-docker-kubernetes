pipeline {
    agent any

    /*
    parameters
            {
                choice(choices: ['WEB', 'IOS', 'ANDROID', 'INTEGRATION'], description: '', name: 'PROJECT')
                string defaultValue: 'master', description: 'https://jenkins.gtest.sahibindenlocal.net/jenkins/userContent/Tags', name: 'BRANCH', trim: true
            }
     */

    tools
            {
                maven 'Maven 3.6.3'
            }

    options
            {
                ansiColor('xterm')
            }

    stages {

        /*
        stage('Environment Info')
        {
            steps
                    {
                        sh label: 'echo workspace', script: "echo ${WORKSPACE}"
                        sh label: 'java version', script: "java --version"
                        sh label: 'maven version', script: "mvn --version"
                        sh label: 'export docket', script: "export --version"
                    }
        }
         */

        stage('Docker Container Initialize')
                {
                    steps
                            {
                                sh label: 'echo', script: "export PATH=\"/usr/local/bin/docker:$PATH\""
                                sh label: 'docker compose version', script: "docker-compose --version"
                                sh label: 'docker compose', script: "docker-compose up --scale chrome=5"
                            }
                }

        stage('Test Execute')
                {
                    steps
                            {
                                sh label: 'execute', script: "mvn clean install surefire:test -Dtest=SahibindenDemo -Djunit.jupiter.execution.parallel.config.fixed.parallelism=5"
                            }
                }

        stage('Test Result')
                {
                    steps
                            {
                                sh label: 'execute', script: "mvn allure:serve"
                            }
                }
    }

    post
            {

                always
                        {
                            sh label: 'Finished', script: "echo finisned"
                        }
            }
}